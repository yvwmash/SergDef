-- read CSV to table
-- no regexp on each column value, COPY
--
create or replace function from_csv(fn text, tn text, has_header boolean default TRUE, delimiter text default ',')
returns int as
$$
 import plpy
 import sys
 import os
 import locale
 import csv
 from inc import exit, true, false, none

 locale.setlocale(locale.LC_ALL, 'uk_UA.utf8')

 def _exec(q, status):
  try:
   p  = plpy.prepare(q)
   rv = plpy.execute(p)
  except plpy.SPIError as e:
   plpy.notice(q, e)
   return status
  return 0

 _imp_path = os.getenv('DB_IMPORT')
 if _imp_path is none:
  _imp_path = ''

 _h  = 0
 _nc = 0
 _lc = []

 if has_header == false or has_header == none:
  _h = none

 # read first row of a CSV file
 try:
  f = open(f"{_imp_path}{fn}", 'r')
 except OSError as e:
  plpy.notice(e)
  return e.errno
 r = csv.reader(f)
 row = next(r)
 f.close()

 _nc = len(row)

 # create list of column names
 if _h == none:
  cnm = 'c_'
  for i in range(0, _nc):
   _lc.append(cnm + i)
 else:
  _lc = row

 # create empty table
 q = f"drop table if exists {tn}"
 status = _exec(q, -1)
 if status != 0:
  return status
 q = f"create table {tn}()"
 status = _exec(q, -2)
 if status != 0:
  return status
 q = f"alter table {tn} set UNLOGGED"
 status = _exec(q, -3)
 if status != 0:
  return status

 # add columns to the table
 for i in range(0, _nc):
  column_nm_ = plpy.quote_ident(_lc[i])
  q = f"alter table {tn} add column {column_nm_} text"
  status = _exec(q, -4)
  if status != 0:
   return status

 # COPY
 if _h == none:
  _h = ''
 else:
  _h = ', header'
 q = f"copy {tn} from '{_imp_path}{fn}' with (format csv, delimiter '{delimiter}'{_h})"
 status = _exec(q, -5)
 if status != 0:
  return status

 return 0
$$ language 'plpython3u';